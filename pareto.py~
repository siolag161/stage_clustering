import numpy as np

def pareto_filter(clusterings, measures, reverse = []):
    """ get a list of clusterings based on the measure indexes passed in the arguments """
    clusterings.sort(key = lambda(x): x.get_value(measures[0]))

    pareto_frontier.append(clusterings[0])
    for clustering in clusterings:
        if sum([row[x] >= pareto_frontier[-1][x]
                for x in range(len(row))]) == len(row):
            # If it is better on all features add the row to pareto_frontier
            pareto_frontier = np.concatenate((pareto_frontier, [row]))
